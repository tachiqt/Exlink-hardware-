#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

const char* ssid = "tachi";
const char* password = "qtkooooo";
#define SOCKET_ON LOW   
#define SOCKET_OFF HIGH

ESP8266WebServer server(80);


const int relay1 = 5;   
const int relay2 = 9;   
const int relay3 = 14;  
const int relay4 = 12;  

// Updated sensor pins
const int sc_pin = 16; 
const int s1_pin = 0;  
const int s2_pin = 2;   
const int s3_pin = 15;   
const int s4_pin = 13;  

bool socket1State = false;
bool socket2State = false;
bool socket3State = false;
bool socket4State = false;

int socket1Power = 0;
int socket2Power = 0;
int socket3Power = 0;
int socket4Power = 0;

#define MAX_LOGS 20
String requestLogs[MAX_LOGS];
int logIndex = 0;

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println();
  Serial.println("============================");
  Serial.println("ESP8266 SOCKET CONTROLLER WITH SD PINS");
  Serial.println("============================");
  
  pinMode(sc_pin, INPUT);
  pinMode(s1_pin, INPUT);
  pinMode(s2_pin, INPUT);
  pinMode(s3_pin, INPUT);
  pinMode(s4_pin, INPUT);
  pinMode(relay1, OUTPUT);
  pinMode(relay2, OUTPUT);
  pinMode(relay3, OUTPUT);
  pinMode(relay4, OUTPUT);
  digitalWrite(relay1, SOCKET_OFF);
  digitalWrite(relay2, SOCKET_OFF);
  digitalWrite(relay3, SOCKET_OFF);
  digitalWrite(relay4, SOCKET_OFF);
  
  Serial.println("All sockets initialized to OFF state");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.printf("Connecting to WiFi: %s ", ssid);
  
  int timeout = 0;
  while (WiFi.status() != WL_CONNECTED && timeout < 30) {
    delay(500);
    Serial.print(".");
    timeout++;
    
    if (timeout % 10 == 0) {
      Serial.println();
      Serial.print("Still trying to connect... Attempt ");
      Serial.println(timeout);
    }
  }
  
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\nFAILED TO CONNECT TO WIFI!");
    Serial.println("Device will restart in 5 seconds...");
    delay(5000);
    ESP.restart();
  }
  
  Serial.println("\n\n***** WIFI CONNECTED *****");
  Serial.println("\n==================================");
  Serial.println("IP ADDRESS: " + WiFi.localIP().toString());
  Serial.println("==================================\n");
  
  setupRoutes();

  server.begin();
  Serial.println("HTTP server started");
  for (int i = 0; i < 5; i++) {
    delay(200);
    Serial.print("IP: ");
    Serial.println(WiFi.localIP().toString());
  }
  testSockets();
}

void loop() {
  server.handleClient();
  updatePowerReadings();
  if (Serial.available() > 0) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    processSerialCommand(command);
  }
  static unsigned long lastDisplayTime = 0;
  if (millis() - lastDisplayTime > 30000) {
    Serial.println("\n==================================");
    Serial.println("DEVICE IP: " + WiFi.localIP().toString());
    printStatus();
    Serial.println("==================================");
    lastDisplayTime = millis();
  }
  yield(); 
}

void addLog(String message) {
  String timestamp = String(millis() / 1000);
  requestLogs[logIndex] = "[" + timestamp + "s] " + message;
  logIndex = (logIndex + 1) % MAX_LOGS;
  Serial.println(message);
}

void setupRoutes() {
  server.on("/", HTTP_GET, handleRoot);
  server.on("/socket", HTTP_GET, handleSocketCommand);
  server.on("/status", HTTP_GET, handleStatus);
  server.on("/power", HTTP_GET, handlePowerStatus);
  server.on("/test", HTTP_GET, handleTest);
  server.on("/reset", HTTP_GET, handleReset);
  server.on("/ip", HTTP_GET, []() {
    server.send(200, "text/plain", WiFi.localIP().toString());
  });
  server.onNotFound([]() {
    String message = "NOT FOUND: " + server.uri() + " with ";
    
    if (server.args() == 0) {
      message += "no parameters";
    } else {
      message += "parameters: ";
      for (int i = 0; i < server.args(); i++) {
        message += server.argName(i) + "=" + server.arg(i);
        if (i < server.args() - 1) {
          message += ", ";
        }
      }
    }
    
    addLog(message);
    server.send(404, "text/plain", "Not found");
  });
  server.enableCORS(true);
}

void handleRoot() {
  String html = "<html><head><title>ESP8266 Socket Controller</title>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1'>";
  html += "<style>";
  html += "body{font-family:Arial,sans-serif;margin:20px;line-height:1.6;} ";
  html += ".ip-display{background-color:#2196F3;color:white;padding:15px;text-align:center;font-size:24px;margin:15px 0;border-radius:5px;} ";
  html += ".log{background-color:#f0f0f0;padding:10px;margin:5px 0;border-left:3px solid #2196F3;word-wrap:break-word;} ";
  html += ".refresh{background-color:#4CAF50;color:white;padding:10px 15px;text-decoration:none;display:inline-block;margin:10px 0;border-radius:4px;}";
  html += ".socket-controls{display:flex;flex-wrap:wrap;gap:10px;margin:20px 0;}";
  html += ".socket-btn{padding:10px 15px;margin:5px;border-radius:4px;cursor:pointer;text-decoration:none;color:white;font-weight:bold;}";
  html += ".on{background-color:#4CAF50;}";
  html += ".off{background-color:#f44336;}";
  html += ".socket{background-color:#f8f8f8;padding:15px;border-radius:4px;margin:10px 0;border:1px solid #ddd;}";
  html += ".header{display:flex;justify-content:space-between;align-items:center;}";
  html += "</style></head><body>";
  html += "<div class='header'>";
  html += "<h1>ESP8266 Socket Controller (SD Pins)</h1>";
  html += "<a href='/' class='refresh'>Refresh</a>";
  html += "</div>";
  html += "<div class='ip-display'>IP Address: " + WiFi.localIP().toString() + "</div>";
  html += "<h2>Socket Controls:</h2>";
  html += "<div class='socket-controls'>";
  
  // Socket 1 
  html += "<div class='socket'>";
  html += "<h3>Socket 1 (SDD3)</h3>";
  html += "<p>Status: <strong>" + String(socket1State ? "ON" : "OFF") + "</strong></p>";
  html += "<p>Power: <strong>" + String(socket1Power) + " W</strong></p>";
  html += "<a href='/socket?id=1&state=on' class='socket-btn on'>Turn ON</a>";
  html += "<a href='/socket?id=1&state=off' class='socket-btn off'>Turn OFF</a>";
  html += "</div>";
  
  // Socket 2 
  html += "<div class='socket'>";
  html += "<h3>Socket 2 (SDD2)</h3>";
  html += "<p>Status: <strong>" + String(socket2State ? "ON" : "OFF") + "</strong></p>";
  html += "<p>Power: <strong>" + String(socket2Power) + " W</strong></p>";
  html += "<a href='/socket?id=2&state=on' class='socket-btn on'>Turn ON</a>";
  html += "<a href='/socket?id=2&state=off' class='socket-btn off'>Turn OFF</a>";
  html += "</div>";
  
  // Socket 3 
  html += "<div class='socket'>";
  html += "<h3>Socket 3 (GPIO14)</h3>";
  html += "<p>Status: <strong>" + String(socket3State ? "ON" : "OFF") + "</strong></p>";
  html += "<p>Power: <strong>" + String(socket3Power) + " W</strong></p>";
  html += "<a href='/socket?id=3&state=on' class='socket-btn on'>Turn ON</a>";
  html += "<a href='/socket?id=3&state=off' class='socket-btn off'>Turn OFF</a>";
  html += "</div>";
  
  // Socket 4 
  html += "<div class='socket'>";
  html += "<h3>Socket 4 (GPIO12)</h3>";
  html += "<p>Status: <strong>" + String(socket4State ? "ON" : "OFF") + "</strong></p>";
  html += "<p>Power: <strong>" + String(socket4Power) + " W</strong></p>";
  html += "<a href='/socket?id=4&state=on' class='socket-btn on'>Turn ON</a>";
  html += "<a href='/socket?id=4&state=off' class='socket-btn off'>Turn OFF</a>";
  html += "</div>";
  
  html += "</div>";
  html += "<div>";
  html += "<a href='/test' class='socket-btn' style='background-color:#FF9800;'>Test All Sockets</a>";
  html += "<a href='/reset' class='socket-btn' style='background-color:#9C27B0;'>Reset Device</a>";
  html += "</div>";
  html += "<h2>Request Logs:</h2>";
  for (int i = 0; i < MAX_LOGS; i++) {
    int idx = (logIndex - 1 - i + MAX_LOGS) % MAX_LOGS;
    if (requestLogs[idx] != "") {
      html += "<div class='log'>" + requestLogs[idx] + "</div>";
    }
  }
  
  html += "<script>setTimeout(function(){ location.reload(); }, 5000);</script>"; // Auto refresh every 5 seconds
  html += "</body></html>";
  
  server.send(200, "text/html", html);
}

void updatePowerReadings() {
  if (socket1State) {
    socket1Power = random(80, 120); 
  } else {
    socket1Power = 0;
  }
  
  if (socket2State) {
    socket2Power = random(150, 200);
  } else {
    socket2Power = 0;
  }
  
  if (socket3State) {
    socket3Power = random(50, 75);
  } else {
    socket3Power = 0;
  }
  
  if (socket4State) {
    socket4Power = random(200, 250);
  } else {
    socket4Power = 0;
  }
}

void printStatus() {
  Serial.println("=== Socket Status ===");
  Serial.print("Socket 1 (SDD3): ");
  Serial.println(socket1State ? "ON" : "OFF");
  Serial.print("Socket 2 (SDD2): ");
  Serial.println(socket2State ? "ON" : "OFF");
  Serial.print("Socket 3 (GPIO14): ");
  Serial.println(socket3State ? "ON" : "OFF");
  Serial.print("Socket 4 (GPIO12): ");
  Serial.println(socket4State ? "ON" : "OFF");
  Serial.println("====================");
}

void controlSocket(int id, bool state) {
  if (id < 1 || id > 4) {
    Serial.println("Error: Invalid socket ID. Must be between 1 and 4.");
    return;
  }

  Serial.print("Controlling socket ");
  Serial.print(id);
  Serial.print(" -> ");
  Serial.println(state ? "ON" : "OFF");
  int pinValue = state ? SOCKET_ON : SOCKET_OFF;

  switch (id) {
    case 1:
      digitalWrite(relay1, pinValue);
      socket1State = state;
      break;
    case 2:
      digitalWrite(relay2, pinValue);
      socket2State = state;
      break;
    case 3:
      digitalWrite(relay3, pinValue);
      socket3State = state;
      break;
    case 4:
      digitalWrite(relay4, pinValue);
      socket4State = state;
      break;
    default:
      Serial.println("Error: Invalid socket ID.");
      return;
  }
  printStatus();
}

void processSerialCommand(String command) {
  Serial.print("Processing command: ");
  Serial.println(command);
  if (command.length() == 0 || command == "status") {
    printStatus();
    return;
  }
  
  if (command.startsWith("(") && command.endsWith(")")) {
    command = command.substring(1, command.length() - 1);
  }
  int socketId = 0;
  bool state = true;
  int commaIndex = command.indexOf(',');
  if (commaIndex == -1) {
    socketId = command.toInt();
  } else {
    socketId = command.substring(0, commaIndex).toInt();
    String stateStr = command.substring(commaIndex + 1);
    stateStr.toLowerCase();
    state = (stateStr == "true" || stateStr == "1" || stateStr == "on");
  }
  controlSocket(socketId, state);
}

void handleSocketCommand() {
  String requestLog = "SOCKET REQUEST: ";
  for (int i = 0; i < server.args(); i++) {
    requestLog += server.argName(i) + "=" + server.arg(i);
    if (i < server.args() - 1) {
      requestLog += ", ";
    }
  }
  addLog(requestLog);
  if (!server.hasArg("id")) {
    server.send(400, "text/plain", "Missing socket ID");
    return;
  }
  int socketId = server.arg("id").toInt();
  bool state = true;
  
  if (server.hasArg("state")) {
    String stateStr = server.arg("state");
    stateStr.toLowerCase();
    state = (stateStr == "true" || stateStr == "1" || stateStr == "on");
  }
  if (socketId < 1 || socketId > 4) {
    server.send(400, "text/plain", "Invalid socket ID. Must be 1-4");
    return;
  }
  controlSocket(socketId, state);
  String response = "{\n";
  response += "  \"success\": true,\n";
  response += "  \"socketId\": " + String(socketId) + ",\n";
  response += "  \"state\": \"" + String(state ? "on" : "off") + "\",\n";
  response += "  \"power\": " + String(getPowerForSocket(socketId)) + "\n";
  response += "}";
  server.send(200, "application/json", response);
}

int getPowerForSocket(int socketId) {
  switch (socketId) {
    case 1: return socket1Power;
    case 2: return socket2Power;
    case 3: return socket3Power;
    case 4: return socket4Power;
    default: return 0;
  }
}

void handleStatus() {
  addLog("Status request received");
  String status = "{\n";
  status += "  \"socket1\": " + String(socket1State ? "true" : "false") + ",\n";
  status += "  \"socket2\": " + String(socket2State ? "true" : "false") + ",\n";
  status += "  \"socket3\": " + String(socket3State ? "true" : "false") + ",\n";
  status += "  \"socket4\": " + String(socket4State ? "true" : "false") + ",\n";
  status += "  \"ip\": \"" + WiFi.localIP().toString() + "\"\n";
  status += "}";
  
  server.send(200, "application/json", status);
  printStatus();
}

void handlePowerStatus() {
  addLog("Power status request received");
  String status = "{\n";
  status += "  \"socket1\": {\n";
  status += "    \"state\": " + String(socket1State ? "true" : "false") + ",\n";
  status += "    \"power\": " + String(socket1Power) + "\n";
  status += "  },\n";
  status += "  \"socket2\": {\n";
  status += "    \"state\": " + String(socket2State ? "true" : "false") + ",\n";
  status += "    \"power\": " + String(socket2Power) + "\n";
  status += "  },\n";
  status += "  \"socket3\": {\n";
  status += "    \"state\": " + String(socket3State ? "true" : "false") + ",\n";
  status += "    \"power\": " + String(socket3Power) + "\n";
  status += "  },\n";
  status += "  \"socket4\": {\n";
  status += "    \"state\": " + String(socket4State ? "true" : "false") + ",\n";
  status += "    \"power\": " + String(socket4Power) + "\n";
  status += "  }\n";
  status += "}";
  server.send(200, "application/json", status);
}

void testSockets() {
  addLog("Testing all sockets in sequence");
  Serial.println("Testing all sockets in sequence...");
  Serial.println("Testing Socket 1 (SDD3)...");
  digitalWrite(relay1, SOCKET_ON);
  socket1State = true;
  delay(1000);
  digitalWrite(relay1, SOCKET_OFF);
  socket1State = false;
  delay(500);
  Serial.println("Testing Socket 2 (SDD2)...");
  digitalWrite(relay2, SOCKET_ON);
  socket2State = true;
  delay(1000);
  digitalWrite(relay2, SOCKET_OFF);
  socket2State = false;
  delay(500);
  Serial.println("Testing Socket 3 (GPIO14)...");
  digitalWrite(relay3, SOCKET_ON);
  socket3State = true;
  delay(1000);
  digitalWrite(relay3, SOCKET_OFF);
  socket3State = false;
  delay(500);
  Serial.println("Testing Socket 4 (GPIO12)...");
  digitalWrite(relay4, SOCKET_ON);
  socket4State = true;
  delay(1000);
  digitalWrite(relay4, SOCKET_OFF);
  socket4State = false;
  delay(500);
  Serial.println("Socket test complete");
}

void handleTest() {
  addLog("Socket test requested");
  testSockets();
  server.send(200, "text/plain", "Socket test completed");
  printStatus();
}

void handleReset() {
  addLog("Device reset requested");
  server.send(200, "text/plain", "ESP8266 will restart in 3 seconds");
  delay(1000);
  Serial.println("Resetting device...");
  delay(2000);
  ESP.restart();
}
